{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useCallback, useState } from \"react\";\nconst useStockfishEngine = ({\n  onEvaluation\n}) => {\n  _s();\n  const engineRef = useRef(null);\n  const onEvaluationRef = useRef(onEvaluation);\n  const isReadyRef = useRef(false);\n  const [analysisLines, setAnalysisLines] = useState([]);\n\n  // Keep callback updated\n  useEffect(() => {\n    onEvaluationRef.current = onEvaluation;\n  }, [onEvaluation]);\n  useEffect(() => {\n    console.log(\"Initializing Stockfish engine\");\n    const stockfish = new Worker(\"/workers/stockfish-16.1.js\"); // Updated path\n    engineRef.current = stockfish;\n\n    // Use worker.onmessage to handle Stockfish responses\n    stockfish.onmessage = event => {\n      const data = event.data;\n      console.log(\"[Stockfish] Received:\", data);\n      if (data === \"uciok\") {\n        console.log(\"Stockfish UCI ready\");\n        isReadyRef.current = true;\n        // Configure engine\n        stockfish.postMessage(\"setoption name MultiPV value 5\");\n        stockfish.postMessage(\"setoption name UCI_ShowWDL value false\");\n        stockfish.postMessage(\"isready\");\n      } else if (data === \"readyok\") {\n        console.log(\"Stockfish ready\");\n      } else if (data.startsWith(\"info\")) {\n        const analysis_line = parseInfoLine(data);\n        if (analysis_line.depth === 15) {\n          setAnalysisLines(prev => {\n            const newLines = [...prev];\n            if (analysis_line.multipv) {\n              newLines[analysis_line.multipv - 1] = analysis_line;\n            }\n            return newLines;\n          });\n        }\n      } else if (data.startsWith(\"bestmove\")) {\n        console.log(\"Analysis complete\");\n      }\n    };\n\n    // Initialize UCI protocol\n    console.log(\"Starting UCI protocol\");\n    stockfish.postMessage(\"uci\");\n    return () => {\n      console.log(\"Cleaning up Stockfish\");\n      stockfish.terminate();\n    };\n  }, []);\n  const sendCommand = useCallback(cmd => {\n    if (!engineRef.current || !isReadyRef.current) {\n      console.error(\"Engine not ready\");\n      return;\n    }\n    console.log(\"[Stockfish] Sending command:\", cmd);\n    engineRef.current.postMessage(cmd);\n  }, []);\n  return {\n    sendCommand,\n    analysisLines\n  };\n};\n\n//Parsing function to analyze stockfish engine results. \n_s(useStockfishEngine, \"WQ8Uzw+cGeBxHef6yNPlWksnRRI=\");\nconst parseInfoLine = line => {\n  const tokens = line.split(\" \");\n  const info = {};\n\n  // First check for depth\n  const depthIndex = tokens.indexOf(\"depth\");\n  if (depthIndex === -1 || Number(tokens[depthIndex + 1]) !== 15) {\n    return {};\n  }\n  for (let i = 0; i < tokens.length; i++) {\n    switch (tokens[i]) {\n      case \"depth\":\n        info.depth = Number(tokens[++i]);\n        break;\n      case \"seldepth\":\n        info.seldepth = Number(tokens[++i]);\n        break;\n      case \"multipv\":\n        info.multipv = Number(tokens[++i]);\n        break;\n      case \"score\":\n        info.scoreType = tokens[++i]; // \"cp\" or \"mate\"\n        info.score = Number(tokens[++i]);\n        break;\n      case \"nodes\":\n        info.nodes = Number(tokens[++i]);\n        break;\n      case \"nps\":\n        info.nps = Number(tokens[++i]);\n        break;\n      case \"hashfull\":\n        info.hashfull = Number(tokens[++i]);\n        break;\n      case \"time\":\n        info.time = Number(tokens[++i]);\n        break;\n      case \"pv\":\n        // Capture the entire principal variation (all subsequent tokens)\n        info.pv = tokens.slice(i + 1);\n        i = tokens.length; // Exit loop after collecting the PV\n        break;\n      default:\n        // Skip any unhandled tokens\n        break;\n    }\n  }\n  return info;\n};\nexport default useStockfishEngine;","map":{"version":3,"names":["useEffect","useRef","useCallback","useState","useStockfishEngine","onEvaluation","_s","engineRef","onEvaluationRef","isReadyRef","analysisLines","setAnalysisLines","current","console","log","stockfish","Worker","onmessage","event","data","postMessage","startsWith","analysis_line","parseInfoLine","depth","prev","newLines","multipv","terminate","sendCommand","cmd","error","line","tokens","split","info","depthIndex","indexOf","Number","i","length","seldepth","scoreType","score","nodes","nps","hashfull","time","pv","slice"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/useStockfishEngine.js"],"sourcesContent":["import { useEffect, useRef, useCallback, useState } from \"react\";\n\nconst useStockfishEngine = ({ onEvaluation }) => {\n    const engineRef = useRef(null);\n    const onEvaluationRef = useRef(onEvaluation);\n    const isReadyRef = useRef(false);\n    const [analysisLines, setAnalysisLines] = useState([]);\n\n    // Keep callback updated\n    useEffect(() => {\n        onEvaluationRef.current = onEvaluation;\n    }, [onEvaluation]);\n\n    useEffect(() => {\n        console.log(\"Initializing Stockfish engine\");\n        const stockfish = new Worker(\"/workers/stockfish-16.1.js\"); // Updated path\n        engineRef.current = stockfish;\n\n        // Use worker.onmessage to handle Stockfish responses\n        stockfish.onmessage = (event) => {\n            const data = event.data;\n            console.log(\"[Stockfish] Received:\", data);\n\n            if (data === \"uciok\") {\n                console.log(\"Stockfish UCI ready\");\n                isReadyRef.current = true;\n                // Configure engine\n                stockfish.postMessage(\"setoption name MultiPV value 5\");\n                stockfish.postMessage(\"setoption name UCI_ShowWDL value false\");\n                stockfish.postMessage(\"isready\");\n            }\n            else if (data === \"readyok\") {\n                console.log(\"Stockfish ready\");\n            }\n            else if (data.startsWith(\"info\")) {\n                const analysis_line = parseInfoLine(data);\n                if (analysis_line.depth === 15) {\n                    setAnalysisLines(prev => {\n                        const newLines = [...prev];\n                        if (analysis_line.multipv) {\n                            newLines[analysis_line.multipv - 1] = analysis_line;\n                        }\n                        return newLines;\n                    });\n                }\n            }\n            else if (data.startsWith(\"bestmove\")) {\n                console.log(\"Analysis complete\");\n            }\n        };\n\n        // Initialize UCI protocol\n        console.log(\"Starting UCI protocol\");\n        stockfish.postMessage(\"uci\");\n\n        return () => {\n            console.log(\"Cleaning up Stockfish\");\n            stockfish.terminate();\n        };\n    }, []);\n\n    const sendCommand = useCallback((cmd) => {\n        if (!engineRef.current || !isReadyRef.current) {\n            console.error(\"Engine not ready\");\n            return;\n        }\n        console.log(\"[Stockfish] Sending command:\", cmd);\n        engineRef.current.postMessage(cmd);\n    }, []);\n\n    return { sendCommand, analysisLines };\n};\n\n//Parsing function to analyze stockfish engine results. \nconst parseInfoLine = (line) => {\n    const tokens = line.split(\" \");\n    const info = {};\n    \n    // First check for depth\n    const depthIndex = tokens.indexOf(\"depth\");\n    if (depthIndex === -1 || Number(tokens[depthIndex + 1]) !== 15) {\n        return {};\n    }\n    \n    for (let i = 0; i < tokens.length; i++) {\n      switch (tokens[i]) {\n        case \"depth\":\n          info.depth = Number(tokens[++i]);\n          break;\n        case \"seldepth\":\n          info.seldepth = Number(tokens[++i]);\n          break;\n        case \"multipv\":\n          info.multipv = Number(tokens[++i]);\n          break;\n        case \"score\":\n          info.scoreType = tokens[++i]; // \"cp\" or \"mate\"\n          info.score = Number(tokens[++i]);\n          break;\n        case \"nodes\":\n          info.nodes = Number(tokens[++i]);\n          break;\n        case \"nps\":\n          info.nps = Number(tokens[++i]);\n          break;\n        case \"hashfull\":\n          info.hashfull = Number(tokens[++i]);\n          break;\n        case \"time\":\n          info.time = Number(tokens[++i]);\n          break;\n        case \"pv\":\n          // Capture the entire principal variation (all subsequent tokens)\n          info.pv = tokens.slice(i + 1);\n          i = tokens.length; // Exit loop after collecting the PV\n          break;\n        default:\n          // Skip any unhandled tokens\n          break;\n      }\n    }\n    return info;\n  };\n  \n\nexport default useStockfishEngine;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}