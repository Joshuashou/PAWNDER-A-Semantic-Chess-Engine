{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chessground } from 'chessground';\nimport { Chess } from 'chess.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  _s();\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  console.log('Current FEN:', chess.current.fen());\n  console.log('Current turn:', turn);\n  console.log('Move attempted:', {\n    from: orig,\n    to: dest\n  });\n  console.log('Move result:', move);\n  useEffect(() => {\n    const config = {\n      fen: chess.current.fen(),\n      orientation: 'white',\n      turnColor: turn,\n      // Highlight the current player's turn\n      movable: {\n        color: turn,\n        // Only allow the current player to move\n        free: false,\n        events: {\n          after: (orig, dest) => {\n            // Attempt to make the move\n            const move = chess.current.move({\n              from: orig,\n              to: dest,\n              promotion: 'q'\n            });\n\n            // If the move is illegal, revert it\n            if (move === null) return 'snapback';\n\n            // Update the board position\n            ground.set({\n              fen: chess.current.fen()\n            });\n\n            // Switch turns\n            setTurn(chess.current.turn() === 'w' ? 'white' : 'black');\n\n            // Check for game over conditions\n            if (chess.current.isGameOver()) {\n              if (chess.current.isCheckmate()) {\n                alert(`Checkmate! ${chess.current.turn() === 'w' ? 'Black' : 'White'} wins!`);\n              } else if (chess.current.isStalemate()) {\n                alert('Stalemate! The game is a draw.');\n              } else if (chess.current.isThreefoldRepetition()) {\n                alert('Draw by threefold repetition.');\n              } else if (chess.current.isInsufficientMaterial()) {\n                alert('Draw due to insufficient material.');\n              }\n            }\n          }\n        }\n      },\n      highlight: {\n        lastMove: true,\n        // Highlight the last move\n        check: true // Highlight the king in check\n      }\n    };\n    const ground = Chessground(boardRef.current, config);\n    return () => {\n      ground.destroy();\n    };\n  }, [turn]); // Re-run effect when the turn changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    style: {\n      width: '400px',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n_s(ChessBoard, \"AuC1KembizW53zpcI7VCsp4bh08=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chessground","Chess","jsxDEV","_jsxDEV","ChessBoard","_s","boardRef","chess","turn","setTurn","console","log","current","fen","from","orig","to","dest","move","config","orientation","turnColor","movable","color","free","events","after","promotion","ground","set","isGameOver","isCheckmate","alert","isStalemate","isThreefoldRepetition","isInsufficientMaterial","highlight","lastMove","check","destroy","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Chessground } from 'chessground';\nimport { Chess } from 'chess.js';\n\nconst ChessBoard = () => {\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  console.log('Current FEN:', chess.current.fen());\n  console.log('Current turn:', turn);\n  console.log('Move attempted:', { from: orig, to: dest });\n  console.log('Move result:', move);\n  useEffect(() => {\n    const config = {\n      fen: chess.current.fen(),\n      orientation: 'white',\n      turnColor: turn, // Highlight the current player's turn\n      movable: {\n        color: turn, // Only allow the current player to move\n        free: false,\n        events: {\n          after: (orig, dest) => {\n            // Attempt to make the move\n            const move = chess.current.move({ from: orig, to: dest, promotion: 'q' });\n\n            // If the move is illegal, revert it\n            if (move === null) return 'snapback';\n\n            // Update the board position\n            ground.set({ fen: chess.current.fen() });\n\n            // Switch turns\n            setTurn(chess.current.turn() === 'w' ? 'white' : 'black');\n\n            // Check for game over conditions\n            if (chess.current.isGameOver()) {\n              if (chess.current.isCheckmate()) {\n                alert(`Checkmate! ${chess.current.turn() === 'w' ? 'Black' : 'White'} wins!`);\n              } else if (chess.current.isStalemate()) {\n                alert('Stalemate! The game is a draw.');\n              } else if (chess.current.isThreefoldRepetition()) {\n                alert('Draw by threefold repetition.');\n              } else if (chess.current.isInsufficientMaterial()) {\n                alert('Draw due to insufficient material.');\n              }\n            }\n          }\n        }\n      },\n      highlight: {\n        lastMove: true, // Highlight the last move\n        check: true // Highlight the king in check\n      }\n    };\n\n    const ground = Chessground(boardRef.current, config);\n\n    return () => {\n      ground.destroy();\n    };\n  }, [turn]); // Re-run effect when the turn changes\n\n\n\n  return <div ref={boardRef} style={{ width: '400px', height: '400px' }}></div>;\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}