{"ast":null,"code":"import React,{useEffect,useRef,useState,useCallback}from\"react\";import{Chessground}from\"chessground\";import{Chess}from\"chess.js\";import useStockfishEngine from\"./useStockfishEngine\";// Updated import\nimport\"../../node_modules/chessground/assets/chessground.base.css\";import\"../../node_modules/chessground/assets/chessground.brown.css\";import\"../../node_modules/chessground/assets/chessground.cburnett.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChessBoard=()=>{const boardRef=useRef(null);const chess=useRef(new Chess());const groundRef=useRef(null);const[topMoves,setTopMoves]=useState([]);const[turn,setTurn]=useState('white');// Create a callback for the evaluation\nconst handleEvaluation=useCallback(data=>{const parsedMoves=parseStockfishOutput(data);setTopMoves(parsedMoves);},[]);// Initialize Stockfish Engine\nconst{sendCommand}=useStockfishEngine({onEvaluation:handleEvaluation});// Ensure sendCommand is defined\nif(!sendCommand){console.error(\"StockfishEngine failed to initialize\");return null;// Or render a fallback UI\n}// Get possible legal moves\nconst getDests=useCallback(()=>{const dests=new Map();chess.current.moves({verbose:true}).forEach(move=>{if(!dests.has(move.from))dests.set(move.from,[]);dests.get(move.from).push(move.to);});return dests;},[]);// Handle player moves\nconst handleMove=useCallback((orig,dest)=>{try{const move=chess.current.move({from:orig,to:dest,promotion:\"q\"});if(move===null){console.log(\"Invalid move\");return\"snapback\";}// Update the board state\ngroundRef.current.set({fen:chess.current.fen()});const newTurn=chess.current.turn()==='w'?'white':'black';setTurn(newTurn);// Define analyzePosition inside handleMove\nconst analyzePosition=()=>{if(sendCommand){sendCommand(\"position fen \".concat(chess.current.fen()));sendCommand(\"go depth 15\");}else{console.error(\"sendCommand is not defined\");}};// Trigger Stockfish analysis\nanalyzePosition();}catch(error){console.error(\"Error handling move:\",error);}},[sendCommand]);// Add sendCommand as a dependency\n// Initialize Chessground\nuseEffect(()=>{if(!groundRef.current){groundRef.current=Chessground(boardRef.current,{fen:chess.current.fen(),orientation:\"white\",turnColor:turn,// Add turnColor\nmovable:{color:turn,// Add color\nfree:false,dests:getDests(),events:{after:(orig,dest)=>handleMove(orig,dest)}},highlight:{lastMove:true,check:true}});}// Cleanup on unmount\nreturn()=>{if(groundRef.current){groundRef.current.destroy();}};},[turn,getDests,handleMove]);// Add dependencies\n// Parse Stockfish output for best moves\nconst parseStockfishOutput=output=>{const moveRegex=/pv\\s+([a-h][1-8][a-h][1-8])\\s/g;let moves=[];let match;while((match=moveRegex.exec(output))!==null){moves.push(match[1]);}return moves.slice(0,5);// Get top 5 moves\n};return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\"},children:[/*#__PURE__*/_jsx(\"div\",{ref:boardRef,style:{width:\"400px\",height:\"400px\"}}),/*#__PURE__*/_jsxs(\"div\",{style:{width:\"200px\",marginLeft:\"20px\"},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Top Moves\"}),/*#__PURE__*/_jsx(\"ul\",{children:topMoves.map((move,index)=>/*#__PURE__*/_jsx(\"li\",{children:move},index))})]})]});};export default ChessBoard;","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","Chessground","Chess","useStockfishEngine","jsx","_jsx","jsxs","_jsxs","ChessBoard","boardRef","chess","groundRef","topMoves","setTopMoves","turn","setTurn","handleEvaluation","data","parsedMoves","parseStockfishOutput","sendCommand","onEvaluation","console","error","getDests","dests","Map","current","moves","verbose","forEach","move","has","from","set","get","push","to","handleMove","orig","dest","promotion","log","fen","newTurn","analyzePosition","concat","orientation","turnColor","movable","color","free","events","after","highlight","lastMove","check","destroy","output","moveRegex","match","exec","slice","style","display","children","ref","width","height","marginLeft","map","index"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Chessground } from \"chessground\";\nimport { Chess } from \"chess.js\";\nimport useStockfishEngine from \"./useStockfishEngine\"; // Updated import\nimport \"../../node_modules/chessground/assets/chessground.base.css\";\nimport \"../../node_modules/chessground/assets/chessground.brown.css\";\nimport \"../../node_modules/chessground/assets/chessground.cburnett.css\";\n\nconst ChessBoard = () => {\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const groundRef = useRef(null);\n  const [topMoves, setTopMoves] = useState([]);\n  const [turn, setTurn] = useState('white');\n\n  // Create a callback for the evaluation\n  const handleEvaluation = useCallback((data) => {\n    const parsedMoves = parseStockfishOutput(data);\n    setTopMoves(parsedMoves);\n  }, []);\n\n  // Initialize Stockfish Engine\n  const { sendCommand } = useStockfishEngine({\n    onEvaluation: handleEvaluation\n  });\n\n  // Ensure sendCommand is defined\n  if (!sendCommand) {\n    console.error(\"StockfishEngine failed to initialize\");\n    return null; // Or render a fallback UI\n  }\n\n  // Get possible legal moves\n  const getDests = useCallback(() => {\n    const dests = new Map();\n    chess.current.moves({ verbose: true }).forEach((move) => {\n      if (!dests.has(move.from)) dests.set(move.from, []);\n      dests.get(move.from).push(move.to);\n    });\n    return dests;\n  }, []);\n\n  // Handle player moves\n  const handleMove = useCallback((orig, dest) => {\n    try {\n      const move = chess.current.move({ from: orig, to: dest, promotion: \"q\" });\n\n      if (move === null) {\n        console.log(\"Invalid move\");\n        return \"snapback\";\n      }\n\n      // Update the board state\n      groundRef.current.set({ fen: chess.current.fen() });\n\n      const newTurn = chess.current.turn() === 'w' ? 'white' : 'black';\n      setTurn(newTurn);\n\n      // Define analyzePosition inside handleMove\n      const analyzePosition = () => {\n        if (sendCommand) {\n          sendCommand(`position fen ${chess.current.fen()}`);\n          sendCommand(\"go depth 15\");\n        } else {\n          console.error(\"sendCommand is not defined\");\n        }\n      };\n\n      // Trigger Stockfish analysis\n      analyzePosition();\n    } catch (error) {\n      console.error(\"Error handling move:\", error);\n    }\n  }, [sendCommand]); // Add sendCommand as a dependency\n\n  // Initialize Chessground\n  useEffect(() => {\n    if (!groundRef.current) {\n      groundRef.current = Chessground(boardRef.current, {\n        fen: chess.current.fen(),\n        orientation: \"white\",\n        turnColor: turn, // Add turnColor\n        movable: {\n          color: turn, // Add color\n          free: false,\n          dests: getDests(),\n          events: {\n            after: (orig, dest) => handleMove(orig, dest),\n          },\n        },\n        highlight: {\n          lastMove: true,\n          check: true,\n        },\n      });\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (groundRef.current) {\n        groundRef.current.destroy();\n      }\n    };\n  }, [turn, getDests, handleMove]); // Add dependencies\n\n  // Parse Stockfish output for best moves\n  const parseStockfishOutput = (output) => {\n    const moveRegex = /pv\\s+([a-h][1-8][a-h][1-8])\\s/g;\n    let moves = [];\n    let match;\n    while ((match = moveRegex.exec(output)) !== null) {\n      moves.push(match[1]);\n    }\n    return moves.slice(0, 5); // Get top 5 moves\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {/* Chessboard */}\n      <div ref={boardRef} style={{ width: \"400px\", height: \"400px\" }}></div>\n\n      {/* Sidebar for Stockfish Analysis */}\n      <div style={{ width: \"200px\", marginLeft: \"20px\" }}>\n        <h3>Top Moves</h3>\n        <ul>\n          {topMoves.map((move, index) => (\n            <li key={index}>{move}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}