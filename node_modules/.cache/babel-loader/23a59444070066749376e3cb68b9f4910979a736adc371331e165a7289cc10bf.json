{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{Chessground}from'chessground';import{Chess}from'chess.js';import StockfishEngine from'./StockfishEngine';import\"../../node_modules/chessground/assets/chessground.base.css\";import\"../../node_modules/chessground/assets/chessground.brown.css\";import\"../../node_modules/chessground/assets/chessground.cburnett.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChessBoard=()=>{const boardRef=useRef(null);const chess=useRef(new Chess());const groundRef=useRef(null);// Store Chessground instance\nconst[turn,setTurn]=useState('white');// Track turn\nconst[topMoves,setTopMoves]=useState([]);// Store Stockfish's top moves\n// Initialize Stockfish Engine\nconst{sendCommand}=StockfishEngine({onEvaluation:data=>{const parsedMoves=parseStockfishOutput(data);setTopMoves(parsedMoves);}});console.log(\"Checkpointttt\");useEffect(()=>{if(!groundRef.current){groundRef.current=Chessground(boardRef.current,{fen:chess.current.fen(),orientation:'white',turnColor:turn,movable:{color:turn,free:false,dests:getDests(),events:{after:(orig,dest)=>handleMove(orig,dest)}},highlight:{lastMove:true,check:true}});}else{// Update the board state when turn changes\nconsole.log(\"Checkpointtt5t\");if(groundRef.current.state.fen!==chess.current.fen()){groundRef.current.set({fen:chess.current.fen()});}}return()=>{// Cleanup Chessground instance if component unmounts\nif(groundRef.current){groundRef.current.destroy();groundRef.current=null;}};},[turn]);// Re-run effect only when the turn changes\n// Handles player move\nconst handleMove=(orig,dest)=>{console.log('Move attempted:',{from:orig,to:dest});const move=chess.current.move({from:orig,to:dest,promotion:'q'});if(move===null){console.log('Invalid move');return'snapback';}console.log('Move result:',move);setTurn(chess.current.turn()==='w'?'white':'black');// Trigger Stockfish analysis after every move\nanalyzePosition();};// Get possible legal moves\nfunction getDests(){const dests=new Map();chess.current.moves({verbose:true}).forEach(move=>{if(!dests.has(move.from))dests.set(move.from,[]);dests.get(move.from).push(move.to);});return dests;}// Send position to Stockfish for analysis\nfunction analyzePosition(){sendCommand(\"position fen \".concat(chess.current.fen()));sendCommand(\"go depth 15\");}// Parse Stockfish output for best moves\nfunction parseStockfishOutput(output){const moveRegex=/pv\\s+([a-h][1-8][a-h][1-8])\\s/g;let moves=[];let match;while((match=moveRegex.exec(output))!==null){moves.push(match[1]);}return moves.slice(0,5);// Get top 5 moves\n}return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\"},children:[/*#__PURE__*/_jsx(\"div\",{ref:boardRef,style:{width:'400px',height:'400px'}}),/*#__PURE__*/_jsxs(\"div\",{style:{width:'200px',marginLeft:'20px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Top Moves\"}),/*#__PURE__*/_jsx(\"ul\",{children:topMoves.map((move,index)=>/*#__PURE__*/_jsx(\"li\",{children:move},index))})]})]});};export default ChessBoard;","map":{"version":3,"names":["React","useEffect","useRef","useState","Chessground","Chess","StockfishEngine","jsx","_jsx","jsxs","_jsxs","ChessBoard","boardRef","chess","groundRef","turn","setTurn","topMoves","setTopMoves","sendCommand","onEvaluation","data","parsedMoves","parseStockfishOutput","console","log","current","fen","orientation","turnColor","movable","color","free","dests","getDests","events","after","orig","dest","handleMove","highlight","lastMove","check","state","set","destroy","from","to","move","promotion","analyzePosition","Map","moves","verbose","forEach","has","get","push","concat","output","moveRegex","match","exec","slice","style","display","children","ref","width","height","marginLeft","map","index"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Chessground } from 'chessground';\nimport { Chess } from 'chess.js';\nimport StockfishEngine from './StockfishEngine';\nimport \"../../node_modules/chessground/assets/chessground.base.css\";\nimport \"../../node_modules/chessground/assets/chessground.brown.css\";\nimport \"../../node_modules/chessground/assets/chessground.cburnett.css\";\n\nconst ChessBoard = () => {\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const groundRef = useRef(null); // Store Chessground instance\n  const [turn, setTurn] = useState('white'); // Track turn\n  const [topMoves, setTopMoves] = useState([]); // Store Stockfish's top moves\n\n  // Initialize Stockfish Engine\n  const { sendCommand } = StockfishEngine({\n    onEvaluation: (data) => {\n      const parsedMoves = parseStockfishOutput(data);\n      setTopMoves(parsedMoves);\n    },\n  });\n  console.log(\"Checkpointttt\")\n\n  useEffect(() => {\n    if (!groundRef.current) {\n      groundRef.current = Chessground(boardRef.current, {\n        fen: chess.current.fen(),\n        orientation: 'white',\n        turnColor: turn,\n        movable: {\n          color: turn,\n          free: false,\n          dests: getDests(),\n          events: {\n            after: (orig, dest) => handleMove(orig, dest),\n          },\n        },\n        highlight: {\n          lastMove: true,\n          check: true,\n        },\n      });\n    } else {\n      // Update the board state when turn changes\n      console.log(\"Checkpointtt5t\")\n      if (groundRef.current.state.fen !== chess.current.fen()) {\n        groundRef.current.set({ fen: chess.current.fen() });\n      }\n    }\n\n    return () => {\n      // Cleanup Chessground instance if component unmounts\n      if (groundRef.current) {\n        groundRef.current.destroy();\n        groundRef.current = null;\n      }\n    };\n  }, [turn]); // Re-run effect only when the turn changes\n\n  // Handles player move\n  const handleMove = (orig, dest) => {\n    console.log('Move attempted:', { from: orig, to: dest });\n\n    const move = chess.current.move({ from: orig, to: dest, promotion: 'q' });\n\n    if (move === null) {\n      console.log('Invalid move');\n      return 'snapback';\n    }\n\n    console.log('Move result:', move);\n    setTurn(chess.current.turn() === 'w' ? 'white' : 'black');\n\n    // Trigger Stockfish analysis after every move\n    analyzePosition();\n  };\n\n  // Get possible legal moves\n  function getDests() {\n    const dests = new Map();\n    chess.current.moves({ verbose: true }).forEach(move => {\n      if (!dests.has(move.from)) dests.set(move.from, []);\n      dests.get(move.from).push(move.to);\n    });\n    return dests;\n  }\n\n  // Send position to Stockfish for analysis\n  function analyzePosition() {\n    sendCommand(`position fen ${chess.current.fen()}`);\n    sendCommand(\"go depth 15\");\n  }\n\n  // Parse Stockfish output for best moves\n  function parseStockfishOutput(output) {\n    const moveRegex = /pv\\s+([a-h][1-8][a-h][1-8])\\s/g;\n    let moves = [];\n    let match;\n    while ((match = moveRegex.exec(output)) !== null) {\n      moves.push(match[1]);\n    }\n    return moves.slice(0, 5); // Get top 5 moves\n  }\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {/* Chessboard */}\n      <div ref={boardRef} style={{ width: '400px', height: '400px' }}></div>\n\n      {/* Sidebar for Top Moves */}\n      <div style={{ width: '200px', marginLeft: '20px' }}>\n        <h3>Top Moves</h3>\n        <ul>\n          {topMoves.map((move, index) => (\n            <li key={index}>{move}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}