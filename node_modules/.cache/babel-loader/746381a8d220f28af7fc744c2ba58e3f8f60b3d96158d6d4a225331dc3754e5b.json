{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chessground } from 'chessground';\nimport { Chess } from 'chess.js';\nimport \"../../node_modules/chessground/assets/chessground.base.css\";\nimport \"../../node_modules/chessground/assets/chessground.brown.css\";\nimport \"../../node_modules/chessground/assets/chessground.cburnett.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  _s();\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  const [worker, setWorker] = useState(null); // Stockfish worker for engine analysis. \n\n  useEffect(() => {\n    const config = {\n      fen: chess.current.fen(),\n      orientation: 'white',\n      turnColor: turn,\n      // Highlight the current player's turn\n      movable: {\n        color: turn,\n        // Only allow the current player to move\n        free: false,\n        dests: getDests(),\n        events: {\n          after: (orig, dest) => {\n            console.log('Move attempted:', {\n              from: orig,\n              to: dest\n            });\n\n            // Attempt to make the move\n            const move = chess.current.move({\n              from: orig,\n              to: dest,\n              promotion: 'q'\n            });\n\n            // If the move is illegal, revert it\n            if (move === null) {\n              console.log('Invalid move');\n              return 'snapback';\n            }\n            console.log('Move result:', move);\n\n            // Update the board position\n            ground.set({\n              fen: chess.current.fen()\n            });\n\n            // Switch turns\n            setTurn(chess.current.turn() === 'w' ? 'white' : 'black');\n\n            // Check for game over conditions\n            if (chess.current.isGameOver()) {\n              if (chess.current.isCheckmate()) {\n                alert(`Checkmate! ${chess.current.turn() === 'w' ? 'Black' : 'White'} wins!`);\n              } else if (chess.current.isStalemate()) {\n                alert('Stalemate! The game is a draw.');\n              } else if (chess.current.isThreefoldRepetition()) {\n                alert('Draw by threefold repetition.');\n              } else if (chess.current.isInsufficientMaterial()) {\n                alert('Draw due to insufficient material.');\n              }\n            }\n          }\n        }\n      },\n      highlight: {\n        lastMove: true,\n        // Highlight the last move\n        check: true // Highlight the king in check\n      }\n    };\n    const stockfish = new Worker('/workers/stockfishWorker.js');\n    setWorker(stockfish);\n    stockfish.postMessage({\n      type: 'start'\n    });\n    function getDests() {\n      const dests = new Map();\n      chess.current.moves({\n        verbose: true\n      }).forEach(move => {\n        if (!dests.has(move.from)) dests.set(move.from, []);\n        dests.get(move.from).push(move.to);\n      });\n      return dests;\n    }\n    const ground = Chessground(boardRef.current, config);\n    return () => {\n      ground.destroy();\n    };\n  }, [turn]); // Re-run effect when the turn changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    style: {\n      width: '400px',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(ChessBoard, \"AzuukQglxvxdTtNYcsyzREY8cdk=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chessground","Chess","jsxDEV","_jsxDEV","ChessBoard","_s","boardRef","chess","turn","setTurn","worker","setWorker","config","fen","current","orientation","turnColor","movable","color","free","dests","getDests","events","after","orig","dest","console","log","from","to","move","promotion","ground","set","isGameOver","isCheckmate","alert","isStalemate","isThreefoldRepetition","isInsufficientMaterial","highlight","lastMove","check","stockfish","Worker","postMessage","type","Map","moves","verbose","forEach","has","get","push","destroy","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Chessground } from 'chessground';\nimport { Chess } from 'chess.js';\nimport \"../../node_modules/chessground/assets/chessground.base.css\";\nimport \"../../node_modules/chessground/assets/chessground.brown.css\";\nimport \"../../node_modules/chessground/assets/chessground.cburnett.css\";\n\n\nconst ChessBoard = () => {\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  const [worker, setWorker] = useState(null); // Stockfish worker for engine analysis. \n\n  useEffect(() => {\n    const config = {\n      fen: chess.current.fen(),\n      orientation: 'white',\n      turnColor: turn, // Highlight the current player's turn\n      movable: {\n        color: turn, // Only allow the current player to move\n        free: false,\n        dests: getDests(),\n        events: {\n          after: (orig, dest) => {\n            console.log('Move attempted:', { from: orig, to: dest });\n\n            // Attempt to make the move\n            const move = chess.current.move({ from: orig, to: dest, promotion: 'q' });\n\n            // If the move is illegal, revert it\n            if (move === null) {\n              console.log('Invalid move');\n              return 'snapback';\n            }\n\n            console.log('Move result:', move);\n\n            // Update the board position\n            ground.set({ fen: chess.current.fen() });\n\n            // Switch turns\n            setTurn(chess.current.turn() === 'w' ? 'white' : 'black');\n\n            // Check for game over conditions\n            if (chess.current.isGameOver()) {\n              if (chess.current.isCheckmate()) {\n                alert(`Checkmate! ${chess.current.turn() === 'w' ? 'Black' : 'White'} wins!`);\n              } else if (chess.current.isStalemate()) {\n                alert('Stalemate! The game is a draw.');\n              } else if (chess.current.isThreefoldRepetition()) {\n                alert('Draw by threefold repetition.');\n              } else if (chess.current.isInsufficientMaterial()) {\n                alert('Draw due to insufficient material.');\n              }\n            }\n          }\n        }\n      },\n      highlight: {\n        lastMove: true, // Highlight the last move\n        check: true // Highlight the king in check\n      }\n    };\n\n    const stockfish = new Worker('/workers/stockfishWorker.js');\n    setWorker(stockfish);\n\n    stockfish.postMessage({type: 'start' });\n\n\n    function getDests() {\n        const dests = new Map(); \n        chess.current.moves({ verbose:true }).forEach(move => {\n            if (!dests.has(move.from)) dests.set(move.from, []);\n            dests.get(move.from).push(move.to);\n        })\n        return dests;\n    }\n\n    const ground = Chessground(boardRef.current, config);\n\n    return () => {\n      ground.destroy();\n    };\n  }, [turn]); // Re-run effect when the turn changes\n\n  return <div ref={boardRef} style={{ width: '400px', height: '400px' }}></div>;\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}