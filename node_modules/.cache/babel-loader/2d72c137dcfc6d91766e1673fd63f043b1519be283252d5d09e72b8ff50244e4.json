{"ast":null,"code":"import React,{useEffect,useRef,useState,useCallback}from\"react\";import{Chessground}from\"chessground\";import{Chess}from\"chess.js\";import StockfishEngine from\"./StockfishEngine\";import\"../../node_modules/chessground/assets/chessground.base.css\";import\"../../node_modules/chessground/assets/chessground.brown.css\";import\"../../node_modules/chessground/assets/chessground.cburnett.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChessBoard=()=>{const boardRef=useRef(null);const chess=useRef(new Chess());const groundRef=useRef(null);// Store Chessground instance\nconst[topMoves,setTopMoves]=useState([]);// Store Stockfish's top moves\n// Initialize Stockfish Engine\nconst{sendCommand}=StockfishEngine({onEvaluation:data=>{const parsedMoves=parseStockfishOutput(data);setTopMoves(parsedMoves);// Update top moves\n}});// Initialize Chessground\nuseEffect(()=>{if(!groundRef.current){groundRef.current=Chessground(boardRef.current,{fen:chess.current.fen(),orientation:\"white\",movable:{free:false,dests:getDests(),events:{after:(orig,dest)=>handleMove(orig,dest)}},highlight:{lastMove:true,check:true}});}// Cleanup on unmount\nreturn()=>{if(groundRef.current){groundRef.current.destroy();}};},[]);// Run only once on mount\n// Handle player moves\nconst handleMove=(orig,dest)=>{const move=chess.current.move({from:orig,to:dest,promotion:\"q\"});if(move===null){console.log(\"Invalid move\");return\"snapback\";}// Update the board state\ngroundRef.current.set({fen:chess.current.fen()});// Trigger Stockfish analysis\nanalyzePosition();};// Get possible legal moves\nconst getDests=()=>{const dests=new Map();chess.current.moves({verbose:true}).forEach(move=>{if(!dests.has(move.from))dests.set(move.from,[]);dests.get(move.from).push(move.to);});return dests;};// Send position to Stockfish for analysis\nconst analyzePosition=()=>{sendCommand(\"position fen \".concat(chess.current.fen()));sendCommand(\"go depth 15\");};// Parse Stockfish output for best moves\nconst parseStockfishOutput=output=>{const moveRegex=/pv\\s+([a-h][1-8][a-h][1-8])\\s/g;let moves=[];let match;while((match=moveRegex.exec(output))!==null){moves.push(match[1]);}return moves.slice(0,5);// Get top 5 moves\n};return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\"},children:[/*#__PURE__*/_jsx(\"div\",{ref:boardRef,style:{width:\"400px\",height:\"400px\"}}),/*#__PURE__*/_jsxs(\"div\",{style:{width:\"200px\",marginLeft:\"20px\"},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Top Moves\"}),/*#__PURE__*/_jsx(\"ul\",{children:topMoves.map((move,index)=>/*#__PURE__*/_jsx(\"li\",{children:move},index))})]})]});};export default ChessBoard;","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","Chessground","Chess","StockfishEngine","jsx","_jsx","jsxs","_jsxs","ChessBoard","boardRef","chess","groundRef","topMoves","setTopMoves","sendCommand","onEvaluation","data","parsedMoves","parseStockfishOutput","current","fen","orientation","movable","free","dests","getDests","events","after","orig","dest","handleMove","highlight","lastMove","check","destroy","move","from","to","promotion","console","log","set","analyzePosition","Map","moves","verbose","forEach","has","get","push","concat","output","moveRegex","match","exec","slice","style","display","children","ref","width","height","marginLeft","map","index"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/src/components/ChessBoard.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Chessground } from \"chessground\";\nimport { Chess } from \"chess.js\";\nimport StockfishEngine from \"./StockfishEngine\";\nimport \"../../node_modules/chessground/assets/chessground.base.css\";\nimport \"../../node_modules/chessground/assets/chessground.brown.css\";\nimport \"../../node_modules/chessground/assets/chessground.cburnett.css\";\n\nconst ChessBoard = () => {\n  const boardRef = useRef(null);\n  const chess = useRef(new Chess());\n  const groundRef = useRef(null); // Store Chessground instance\n  const [topMoves, setTopMoves] = useState([]); // Store Stockfish's top moves\n\n  // Initialize Stockfish Engine\n  const { sendCommand } = StockfishEngine({\n    onEvaluation: (data) => {\n      const parsedMoves = parseStockfishOutput(data);\n      setTopMoves(parsedMoves); // Update top moves\n    },\n  });\n\n  // Initialize Chessground\n  useEffect(() => {\n    if (!groundRef.current) {\n      groundRef.current = Chessground(boardRef.current, {\n        fen: chess.current.fen(),\n        orientation: \"white\",\n        movable: {\n          free: false,\n          dests: getDests(),\n          events: {\n            after: (orig, dest) => handleMove(orig, dest),\n          },\n        },\n        highlight: {\n          lastMove: true,\n          check: true,\n        },\n      });\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (groundRef.current) {\n        groundRef.current.destroy();\n      }\n    };\n  }, []); // Run only once on mount\n\n  // Handle player moves\n  const handleMove = (orig, dest) => {\n    const move = chess.current.move({ from: orig, to: dest, promotion: \"q\" });\n\n    if (move === null) {\n      console.log(\"Invalid move\");\n      return \"snapback\";\n    }\n\n    // Update the board state\n    groundRef.current.set({ fen: chess.current.fen() });\n\n    // Trigger Stockfish analysis\n    analyzePosition();\n  };\n\n  // Get possible legal moves\n  const getDests = () => {\n    const dests = new Map();\n    chess.current.moves({ verbose: true }).forEach((move) => {\n      if (!dests.has(move.from)) dests.set(move.from, []);\n      dests.get(move.from).push(move.to);\n    });\n    return dests;\n  };\n\n  // Send position to Stockfish for analysis\n  const analyzePosition = () => {\n    sendCommand(`position fen ${chess.current.fen()}`);\n    sendCommand(\"go depth 15\");\n  };\n\n  // Parse Stockfish output for best moves\n  const parseStockfishOutput = (output) => {\n    const moveRegex = /pv\\s+([a-h][1-8][a-h][1-8])\\s/g;\n    let moves = [];\n    let match;\n    while ((match = moveRegex.exec(output)) !== null) {\n      moves.push(match[1]);\n    }\n    return moves.slice(0, 5); // Get top 5 moves\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {/* Chessboard */}\n      <div ref={boardRef} style={{ width: \"400px\", height: \"400px\" }}></div>\n\n      {/* Sidebar for Stockfish Analysis */}\n      <div style={{ width: \"200px\", marginLeft: \"20px\" }}>\n        <h3>Top Moves</h3>\n        <ul>\n          {topMoves.map((move, index) => (\n            <li key={index}>{move}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}