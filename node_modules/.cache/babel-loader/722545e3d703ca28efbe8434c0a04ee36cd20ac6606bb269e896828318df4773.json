{"ast":null,"code":"import { setVisible, createEl } from './util.js';\nimport { colors, files, ranks } from './types.js';\nimport { createElement as createSVG, setAttributes, createDefs } from './svg.js';\nexport function renderWrap(element, s) {\n  // .cg-wrap (element passed to Chessground)\n  //   cg-container\n  //     cg-board\n  //     svg.cg-shapes\n  //       defs\n  //       g\n  //     svg.cg-custom-svgs\n  //       g\n  //     cg-auto-pieces\n  //     coords.ranks\n  //     coords.files\n  //     piece.ghost\n  element.innerHTML = '';\n  // ensure the cg-wrap class is set\n  // so bounds calculation can use the CSS width/height values\n  // add that class yourself to the element before calling chessground\n  // for a slight performance improvement! (avoids recomputing style)\n  element.classList.add('cg-wrap');\n  for (const c of colors) element.classList.toggle('orientation-' + c, s.orientation === c);\n  element.classList.toggle('manipulable', !s.viewOnly);\n  const container = createEl('cg-container');\n  element.appendChild(container);\n  const board = createEl('cg-board');\n  container.appendChild(board);\n  let svg;\n  let customSvg;\n  let autoPieces;\n  if (s.drawable.visible) {\n    svg = setAttributes(createSVG('svg'), {\n      class: 'cg-shapes',\n      viewBox: '-4 -4 8 8',\n      preserveAspectRatio: 'xMidYMid slice'\n    });\n    svg.appendChild(createDefs());\n    svg.appendChild(createSVG('g'));\n    customSvg = setAttributes(createSVG('svg'), {\n      class: 'cg-custom-svgs',\n      viewBox: '-3.5 -3.5 8 8',\n      preserveAspectRatio: 'xMidYMid slice'\n    });\n    customSvg.appendChild(createSVG('g'));\n    autoPieces = createEl('cg-auto-pieces');\n    container.appendChild(svg);\n    container.appendChild(customSvg);\n    container.appendChild(autoPieces);\n  }\n  if (s.coordinates) {\n    const orientClass = s.orientation === 'black' ? ' black' : '';\n    const ranksPositionClass = s.ranksPosition === 'left' ? ' left' : '';\n    if (s.coordinatesOnSquares) {\n      const rankN = s.orientation === 'white' ? i => i + 1 : i => 8 - i;\n      files.forEach((f, i) => container.appendChild(renderCoords(ranks.map(r => f + r), 'squares rank' + rankN(i) + orientClass + ranksPositionClass)));\n    } else {\n      container.appendChild(renderCoords(ranks, 'ranks' + orientClass + ranksPositionClass));\n      container.appendChild(renderCoords(files, 'files' + orientClass));\n    }\n  }\n  let ghost;\n  if (s.draggable.enabled && s.draggable.showGhost) {\n    ghost = createEl('piece', 'ghost');\n    setVisible(ghost, false);\n    container.appendChild(ghost);\n  }\n  return {\n    board,\n    container,\n    wrap: element,\n    ghost,\n    svg,\n    customSvg,\n    autoPieces\n  };\n}\nfunction renderCoords(elems, className) {\n  const el = createEl('coords', className);\n  let f;\n  for (const elem of elems) {\n    f = createEl('coord');\n    f.textContent = elem;\n    el.appendChild(f);\n  }\n  return el;\n}","map":{"version":3,"names":["setVisible","createEl","colors","files","ranks","createElement","createSVG","setAttributes","createDefs","renderWrap","element","s","innerHTML","classList","add","c","toggle","orientation","viewOnly","container","appendChild","board","svg","customSvg","autoPieces","drawable","visible","class","viewBox","preserveAspectRatio","coordinates","orientClass","ranksPositionClass","ranksPosition","coordinatesOnSquares","rankN","i","forEach","f","renderCoords","map","r","ghost","draggable","enabled","showGhost","wrap","elems","className","el","elem","textContent"],"sources":["/Users/joshuashou/Desktop/Personal/Semantic_Chess_Engine/node_modules/chessground/src/wrap.ts"],"sourcesContent":["import { HeadlessState } from './state.js';\nimport { setVisible, createEl } from './util.js';\nimport { colors, files, ranks, Elements } from './types.js';\nimport { createElement as createSVG, setAttributes, createDefs } from './svg.js';\n\nexport function renderWrap(element: HTMLElement, s: HeadlessState): Elements {\n  // .cg-wrap (element passed to Chessground)\n  //   cg-container\n  //     cg-board\n  //     svg.cg-shapes\n  //       defs\n  //       g\n  //     svg.cg-custom-svgs\n  //       g\n  //     cg-auto-pieces\n  //     coords.ranks\n  //     coords.files\n  //     piece.ghost\n\n  element.innerHTML = '';\n\n  // ensure the cg-wrap class is set\n  // so bounds calculation can use the CSS width/height values\n  // add that class yourself to the element before calling chessground\n  // for a slight performance improvement! (avoids recomputing style)\n  element.classList.add('cg-wrap');\n\n  for (const c of colors) element.classList.toggle('orientation-' + c, s.orientation === c);\n  element.classList.toggle('manipulable', !s.viewOnly);\n\n  const container = createEl('cg-container');\n  element.appendChild(container);\n\n  const board = createEl('cg-board');\n  container.appendChild(board);\n\n  let svg: SVGElement | undefined;\n  let customSvg: SVGElement | undefined;\n  let autoPieces: HTMLElement | undefined;\n\n  if (s.drawable.visible) {\n    svg = setAttributes(createSVG('svg'), {\n      class: 'cg-shapes',\n      viewBox: '-4 -4 8 8',\n      preserveAspectRatio: 'xMidYMid slice',\n    });\n    svg.appendChild(createDefs());\n    svg.appendChild(createSVG('g'));\n\n    customSvg = setAttributes(createSVG('svg'), {\n      class: 'cg-custom-svgs',\n      viewBox: '-3.5 -3.5 8 8',\n      preserveAspectRatio: 'xMidYMid slice',\n    });\n    customSvg.appendChild(createSVG('g'));\n\n    autoPieces = createEl('cg-auto-pieces');\n\n    container.appendChild(svg);\n    container.appendChild(customSvg);\n    container.appendChild(autoPieces);\n  }\n\n  if (s.coordinates) {\n    const orientClass = s.orientation === 'black' ? ' black' : '';\n    const ranksPositionClass = s.ranksPosition === 'left' ? ' left' : '';\n\n    if (s.coordinatesOnSquares) {\n      const rankN: (i: number) => number = s.orientation === 'white' ? i => i + 1 : i => 8 - i;\n      files.forEach((f, i) =>\n        container.appendChild(\n          renderCoords(\n            ranks.map(r => f + r),\n            'squares rank' + rankN(i) + orientClass + ranksPositionClass,\n          ),\n        ),\n      );\n    } else {\n      container.appendChild(renderCoords(ranks, 'ranks' + orientClass + ranksPositionClass));\n      container.appendChild(renderCoords(files, 'files' + orientClass));\n    }\n  }\n\n  let ghost: HTMLElement | undefined;\n  if (s.draggable.enabled && s.draggable.showGhost) {\n    ghost = createEl('piece', 'ghost');\n    setVisible(ghost, false);\n    container.appendChild(ghost);\n  }\n\n  return {\n    board,\n    container,\n    wrap: element,\n    ghost,\n    svg,\n    customSvg,\n    autoPieces,\n  };\n}\n\nfunction renderCoords(elems: readonly string[], className: string): HTMLElement {\n  const el = createEl('coords', className);\n  let f: HTMLElement;\n  for (const elem of elems) {\n    f = createEl('coord');\n    f.textContent = elem;\n    el.appendChild(f);\n  }\n  return el;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}